using System;
using System.IO;
using System.Linq;
using System.Threading;
using Newtonsoft.Json;
using SteamKit2;
using SteamUpdater.Consumers.Messages;

namespace SteamUpdater
{
    public static class Steam
    {
        private const string LastChangeFile = "last-changenumber.txt";

        public static bool quitOnDisconnect;
        private static uint previousChangeNumber;
        public static bool isLoggedOn;

        public static SteamClient steamClient;
        private static CallbackManager manager;

        private static System.Timers.Timer timer1;
        private static System.Timers.Timer timer2;

        public static SteamUser steamUser;
        public static SteamUserStats steamUserStats;
        public static SteamApps steamApps;
        public static SteamFriends steamFriends;

        public static void startSteam(bool debug)
        {
            // Debug
            DebugLog.AddListener(new DebugListener());
            DebugLog.Enabled = debug;

            // Setup client
            steamClient = new SteamClient();
            manager = new CallbackManager(steamClient);

            steamUser = steamClient.GetHandler<SteamUser>();
            steamApps = steamClient.GetHandler<SteamApps>();
            steamFriends = steamClient.GetHandler<SteamFriends>();
            steamUserStats = steamClient.GetHandler<SteamUserStats>();

            // Callbacks
            manager.Subscribe<SteamClient.ConnectedCallback>(OnConnected);
            manager.Subscribe<SteamClient.DisconnectedCallback>(OnDisconnected);
            manager.Subscribe<SteamUser.LoggedOnCallback>(OnLoggedOn);
            manager.Subscribe<SteamUser.LoggedOffCallback>(OnLoggedOff);
            manager.Subscribe<SteamUserStats.NumberOfPlayersCallback>(OnPlayersCount);

            steamClient.Connect();

            timer1 = new System.Timers.Timer();
            timer1.Elapsed += RunWaitCallbacks;
            timer1.Interval = TimeSpan.FromSeconds(1).TotalMilliseconds;
            timer1.Start();

            timer2 = new System.Timers.Timer();
            timer2.Elapsed += CheckForChanges;
            timer2.Interval = TimeSpan.FromSeconds(5).TotalMilliseconds;
//            timer2.Start();
        }

        private static void RunWaitCallbacks(object obj, EventArgs args)
        {
            timer1.Stop();
            manager.RunWaitCallbacks(TimeSpan.FromSeconds(1));
            timer1.Start();
        }

        private static async void CheckForChanges(object obj, EventArgs args)
        {
            timer2.Stop();

            // Check logged in
            if (steamClient.IsConnected && isLoggedOn)
            {
                // Get the last change ID
                if (previousChangeNumber == 0 && File.Exists(LastChangeFile))
                {
                    previousChangeNumber = uint.Parse(File.ReadAllText(LastChangeFile));
                }

                // Get latest changes, if more than 5000, returns 0
                var JobID = steamApps.PICSGetChangesSince(previousChangeNumber, true, true);
                var callback = await JobID;

                if (previousChangeNumber < callback.CurrentChangeNumber)
                {
                    Log.GoogleInfo(
                        String.Format(
                            "Change {0:N0} - {1:N0} ({2:N0} changes) {3} apps, {4} packages",
                            callback.LastChangeNumber,
                            callback.CurrentChangeNumber,
                            callback.CurrentChangeNumber - callback.LastChangeNumber,
                            callback.AppChanges.Count,
                            callback.PackageChanges.Count
                        )
                    );

                    // Save apps
                    Consumers.AbstractConsumer.Produce(
                        Consumers.AbstractConsumer.queueApps,
                        string.Join(",", callback.AppChanges.Keys.ToList())
                    );

                    // Save packages
                    Consumers.AbstractConsumer.Produce(
                        Consumers.AbstractConsumer.queuePackages,
                        string.Join(",", callback.PackageChanges.Keys.ToList())
                    );

                    // Save changes
                    var message = new ChangeDataMessage
                    {
                        PICSChanges = callback
                    };

                    Consumers.AbstractConsumer.Produce(
                        Consumers.AbstractConsumer.queueChangesData,
                        JsonConvert.SerializeObject(message)
                    );

                    // Update change number
                    previousChangeNumber = callback.CurrentChangeNumber;
                    File.WriteAllText(LastChangeFile, previousChangeNumber.ToString());
                }
            }

            timer2.Start();
        }

        private static void OnConnected(SteamClient.ConnectedCallback callback)
        {
            Log.GoogleInfo("Connected to Steam");
            steamUser.LogOn(new SteamUser.LogOnDetails
            {
                Username = Environment.GetEnvironmentVariable("STEAM_PROXY_USERNAME"),
                Password = Environment.GetEnvironmentVariable("STEAM_PROXY_PASSWORD"),
            });
        }

        private static void OnDisconnected(SteamClient.DisconnectedCallback callback)
        {
            Log.GoogleInfo("Disconnected from Steam");
            isLoggedOn = false;

            if (quitOnDisconnect)
            {
                Environment.Exit(0);
            }

            // Try to reconnect
            Thread.Sleep(TimeSpan.FromSeconds(10));
            steamClient.Connect();
        }

        private static void OnLoggedOn(SteamUser.LoggedOnCallback callback)
        {
            if (callback.Result != EResult.OK)
            {
                Log.GoogleInfo(
                    string.Format("Unable to logon to Steam: {0} / {1}", callback.Result, callback.ExtendedResult)
                );
                return;
            }

            Log.GoogleInfo("Logged in");
            isLoggedOn = true;

            Test();
        }

        private static void OnPlayersCount(SteamUserStats.NumberOfPlayersCallback callback)
        {
            Console.WriteLine(JsonConvert.SerializeObject(callback));
        }

        private static void Test()
        {
            var twokapps =
                "1,5,7,8,10,20,30,40,50,60,70,80,90,92,100,130,150,205,210,211,215,218,219,220,240,260,280,300,304,310,320,340,360,364,380,400,410,420,440,456,457,458,459,480,500,510,513,520,530,540,550,560,563,564,565,570,575,576,581,582,583,584,585,586,590,620,629,630,635,640,644,650,651,652,653,654,659,660,669,720,730,740,741,742,745,753,754,755,756,760,761,764,765,767,790,816,841,852,854,882,900,901,902,903,904,905,906,907,908,909,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,994,995,996,997,998,999,1001,1002,1003,1007,1200,1210,1213,1220,1230,1240,1250,1255,1256,1257,1259,1260,1270,1273,1280,1290,1300,1306,1309,1313,1317,1320,1500,1502,1504,1507,1510,1520,1522,1523,1525,1528,1530,1532,1535,1540,1600,1610,1620,1630,1635,1640,1645,1670,1690,1700,1710,1840,1900,1920,1930,2100,2110,2114,2115,2120,2130,2145,2150,2200,2210,2270,2280,2290,2300,2310,2320,2330,2340,2350,2360,2370,2390,2400,2403,2410,2413,2420,2430,2450,2460,2500,2505,2510,2520,2525,2530,2535,2540,2545,2550,2560,2570,2580,2590,2600,2610,2620,2625,2630,2635,2640,2645,2680,2690,2700,2710,2720,2724,2725,2726,2730,2740,2760,2767,2768,2770,2780,2790,2800,2810,2820,2826,2827,2840,2850,2860,2870,2900,2910,2920,2930,2950,2990,3000,3010,3020,3030,3040,3050,3130,3150,3160,3170,3190,3200,3205,3210,3220,3230,3260,3270,3273,3280,3300,3302,3310,3312,3320,3322,3330,3332,3340,3342,3350,3352,3360,3362,3370,3372,3380,3382,3390,3392,3400,3402,3410,3412,3420,3422,3430,3432,3440,3442,3450,3452,3460,3462,3470,3472,3480,3482,3483,3490,3492,3500,3502,3510,3512,3520,3522,3530,3532,3540,3542,3560,3562,3570,3572,3580,3582,3590,3592,3599,3600,3602,3610,3612,3620,3622,3629,3630,3632,3640,3642,3650,3652,3700,3710,3720,3730,3750,3800,3810,3820,3830,3838,3839,3840,3850,3900,3910,3920,3960,3970,3980,3990,4000,4010,4020,4100,4102,4200,4206,4207,4210,4230,4240,4260,4270,4280,4290,4300,4310,4320,4329,4330,4400,4410,4420,4440,4450,4460,4470,4480,4500,4520,4530,4540,4550,4560,4570,4580,4590,4600,4610,4700,4710,4720,4730,4760,4770,4780,4790,4800,4808,4810,4820,4830,4850,4856,4870,4880,4890,4900,4910,4920,4930,4931,4932,4940,5000,5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012,5013,5014,5015,5016,5017,5018,5019,5020,5021,5022,5023,5024,5025,5026,5027,5028,5030,5031,5032,5033,5034,5035,5036,5037,5038,5039,5040,5041,5042,5043,5044,5045,5046,5047,5048,5049,5050,5051,5052,5053,5054,5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5066,5067,5068,5069,5070,5071,5072,5073,5074,5075,5076,5077,5078,5079,5080,5081,5082,5083,5084,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5111,5112,5113,5114,5115,5116,5117,5118,5119,5120,5121,5122,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5149,5150,5151,5152,5153,5154,5155,5157,5158,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5169,5170,5172,5173,5174,5175,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5189,5190,5191,5192,5193,5194,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5227,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5242,5243,5244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5297,5298,5299,5300,5301,5303,5304,5305,5306,5309,5310,5311,5312,5315,5316,5317,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5337,5338,5339,5340,5341,5342,5343,5344,5345,5346,5347,5348,5349,5350,5351,5353,5360,5361,5362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5374,5375,5376,5377,5378,5379,5386,5387,5388,5389,5390,5391,5392,5394,5395,5396,5397,5398,5399,5400,5401,5402,5404,5405,5406,5409,5410,5411,5414,5415,5416,5418,5419,5420,5422,5424,5426,5427,5428,5430,5433,5434,5435,5445,5446,5447,5449,5450,5451,5453,5455,5456,5457,5459,5460,5461,5462,5463,5464,5465,5467,5468,5470,5471,5472,5473,5474,5475,5476,5477,5478,5479,5480,5481,5483,5484,5486,5487,5488,5489,5492,5494,5495,5496,5497,5499,5500,5501,5502,5503,5504,5505,5507,5510,5511,5512,5513,5514,5515,5516,5517,5518,5519,5520,5521,5522,5523,5524,5525,5526,5527,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5549,5550,5551,5552,5553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5569,5570,5571,5572,5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5583,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600,5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5626,5627,5628,5629,5630,5631,5632,5633,5634,5635,5636,5637,5638,5639,5640,5641,5642,5643,5644,5645,5646,5647,5648,5649,5650,5651,5652,5653,5654,5655,5656,5657,5658,5659,5660,5661,5662,5663,5664,5665,5666,5667,5668,5669,5670,5671,5672,5673,5674,5675,5676,5677,5678,5679,5680,5681,5682,5683,5684,5685,5686,5687,5688,5689,5690,5691,5692,5693,5694,5695,5696,5697,5698,5699,5700,5701,5702,5703,5706,5707,5708,5709,5710,5711,5712,5713,5714,5715,5716,5717,5718,5719,5720,5721,5722,5724,5725,5726,5727,5728,5729,5730,5731,5732,5734,5735,5736,5737,5738,5739,5740,5741,5742,5743,5744,5745,5746,5747,5748,5749,5750,5751,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5764,5765,5766,5767,5768,5769,5770,5771,5772,5773,5774,5775,5776,5777,5778,5779,5780,5781,5782,5783,5784,5785,5786,5787,5788,5789,5790,5791,5793,5794,5795,5796,5797,5798,5799,5801,5802,5803,5804,5805,5806,5807,5808,5809,5810,5811,5812,5813,5814,5815,5816,5817,5818,5819,5820,5821,5822,5823,5824,5825,5826,5827,5828,5829,5830,5831,5832,5833,5834,5835,5836,5837,5838,5839,5840,5841,5842,5843,5844,5845,5846,5847,5848,5849,5850,5851,5852,5853,5854,5855,5856,5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5887,5888,5889,5890,5891,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,5911,5912,5913,5914,5915,5916,5917,5918,5921,5922,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936,5937,5938,5939,5940,5941,5942,5943,5944,5945,5946,5947,5949,5950,5951,5952,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5965,5966,5967,5968,5969,5970,5971,5972,5973,5974,5975,5976,5977,5979,5980,5981,5982,5983,5984,5985,5986,5987,5988,5989,5990,5991,5992,5993,5994,5995,5996,6000,6010,6020,6030,6040,6060,6080,6090,6100,6110,6120,6122,6129,6130,6200,6210,6220,6230,6250,6260,6270,6290,6300,6310,6320,6330,6340,6350,6360,6370,6400,6410,6420,6510,6520,6530,6540,6550,6570,6580,6590,6600,6610,6700,6720,6800,6810,6820,6830,6840,6850,6860,6870,6880,6900,6910,6920,6930,6940,6950,6980,7000,7010,7020,7030,7050,7060,7080,7110,7200,7203,7210,7220,7230,7240,7250,7260,7270,7280,7290,7340,7400,7410,7420,7430,7440,7450,7470,7490,7500,7510,7520,7530,7600,7610,7620,7630,7650,7660,7670,7700,7710,7730,7740,7760,7770,7780,7790,7800,7810,7820,7830,7840,7850,7860,7870,7880,7890,7900,7910,7920,7930,7940,7950,7970,7980,7990,8000,8009,8010,8030,8040,8060,8070,8080,8090,8100,8110,8140,8142,8150,8160,8169,8170,8179,8180,8190,8199,8200,8210,8220,8230,8240,8250,8260,8270,8280,8290,8300,8310,8320,8330,8340,8350,8360,8370,8380,8400,8500,8510,8600,8610,8620,8630,8640,8650,8660,8662,8670,8680,8690,8700,8710,8720,8730,8740,8750,8760,8770,8790,8800,8804,8820,8830,8840,8850,8859,8870,8880,8890,8900,8910,8930,8950,8955,8970,8980,8989,8990,9000,9010,9030,9040,9050,9060,9070,9080,9090,9100,9120,9130,9160,9180,9200,9219,9240,9241,9300,9310,9320,9330,9340,9350,9360,9370,9400,9420,9440,9450,9460,9480,9500,9510,9710,9730,9740,9760,9800,9810,9850,9860,9870,9880,9885,9890,9900,9905,9906,9907,9908,9910,9920,9930,9932,9933,9940,9942,9949,9950,9960,9970,9980,9985,9990,9992,9998,10000,10010,10030,10040,10050,10080,10090,10100,10110,10120,10130,10140,10150,10159,10170,10180,10190,10195,10196,10197,10199,10220,10230,10240,10250,10260,10270,10400,10410,10420,10430,10440,10460,10470,10480,10490,10500,10510,10519,10520,10530,10540,10545,10546,10560,10570,10590,10600,10601,10602,10603,10604,10605,10606,10607,10608,10609,10620,10630,10640,10650,10660,10680,10690,10695,10696,10697,10699,10700,11000,11020,11040,11050,11060,11070,11080,11090,11120,11130,11140,11150,11170,11172,11179,11180,11190,11200,11202,11210,11220,11230,11240,11250,11260,11270,11280,11330,11340,11350,11360,11370,11390,11420,11424,11440,11450,11460,11470,11480,11500,11520,11550,11560,11590,11600,11602,11603,11604,11605,11610,11900,11910,11920,12100,12110,12120,12130,12140,12150,12160,12170,12180,12190,12200,12210,12219,12220,12230,12240,12250,12260,12300,12310,12320,12330,12340,12360,12364,12370,12380,12390,12392,12400,12420,12430,12440,12450,12460,12470,12480,12500,12510,12520,12530,12540,12550,12560,12570,12580,12590,12600,12630,12640,12650,12660,12670,12690,12710,12720,12750,12770,12790,12799,12800,12810,12819,12820,12830,12840,12849,12850,12860,12880,12890,12900,12910,13000,13010,13120,13140,13180,13200,13210,13230,13240,13250,13260,13500,13510,13520,13530,13540,13560,13570,13580,13600,13620,13630,13640,13650,13660,13700,15000,15060,15080,15100,15120,15130,15140,15150,15160,15170,15190,15200,15210,15220,15230,15240,15260,15270,15280,15290,15300,15310,15320,15330,15350,15360,15370,15380,15390,15396,15400,15500,15510,15520,15522,15529,15530,15540,15550,15560,15620,15640,15660,15669,15680,15700,15710,15720,15730,15740,15750,15800,15810,15900,15902,15910,15912,15920,15922,15930,15932,15940,15942,15950,15952,15960,15962,15970,15972,15980,15982,15990,15992,16000,16002,16020,16022,16030,16032,16040,16042,16060,16062,16090,16098,16100";
            twokapps = "100,130,150,205";
            var twokappsArray = twokapps.Split(",");

            foreach (var v in twokappsArray)
            {
                Console.WriteLine("-> " + v);
                steamUserStats.GetNumberOfCurrentPlayers(Convert.ToUInt32(v));
            }
        }

        private static void OnLoggedOff(SteamUser.LoggedOffCallback callback)
        {
            Log.GoogleInfo("Logged off");
            isLoggedOn = false;

            if (quitOnDisconnect)
            {
                steamClient.Disconnect();
            }
        }
    }

    internal class DebugListener : IDebugListener
    {
        public void WriteLine(string category, string msg)
        {
            Log.GoogleInfo(string.Format("Debug - {0}: {1}", category, msg));
        }
    }
}